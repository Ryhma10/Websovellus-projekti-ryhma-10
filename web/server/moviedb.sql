-- Citex on case-insensitiivinen tekstityyppi (yksinkertaistaa UNIQUE:a)
CREATE EXTENSION IF NOT EXISTS citext;

-- Taulu users
CREATE TABLE IF NOT EXISTS users (
  id            int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username      citext      NOT NULL,
  email         citext      NOT NULL,
  password_hash text        NOT NULL,
  -- created_at timestamptz NOT NULL DEFAULT now(),  -- otetaan käyttöön ehkä myöhemmin

  -- Varmistetaan uniikit arvot kirjainkoosta riippumatta (citext hoitaa tässä), 
  -- saadaan APIssa ilmaistua 409 joko email tai username taken
  CONSTRAINT users_username_uq UNIQUE (username),
  CONSTRAINT users_email_uq    UNIQUE (email)
);

-- Tehdään trigger, joka varmistaa, että vain käyttäjä itse saa poistaa tilinsä
CREATE OR REPLACE FUNCTION users_delete_guard()
RETURNS trigger
LANGUAGE plpgsql
AS $$
DECLARE
  acting_user_id bigint;
BEGIN
  -- Tehdään acting_user_id, johon tallentuu nykyisen transaktion käyttäjä-ID, jos tyhjä = NULL
  acting_user_id := NULLIF(current_setting('app.user_id', true), '')::int;
  IF acting_user_id IS NULL THEN
    RAISE EXCEPTION 'Permission denied: app.user_id not set';
  END IF;

  IF acting_user_id = OLD.id THEN
    RETURN OLD;  -- annetaan lupa poistaa rivi, (RETURN NULL=ei poisteta, RAISE EXCEPTION=komento keskeytyy virheeseen)
  END IF;

  RAISE EXCEPTION 'Only the user can delete their own account';
END;
$$;

DROP TRIGGER IF EXISTS trg_users_delete_guard ON users;

CREATE TRIGGER trg_users_delete_guard
BEFORE DELETE ON users
FOR EACH ROW
EXECUTE FUNCTION users_delete_guard();

-- Taulu reviews
CREATE TABLE IF NOT EXISTS reviews (
  id         int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id    int NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  tmdb_id    int NOT NULL,
  stars      int NOT NULL,
  body       text NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT chk_reviews_stars CHECK (stars BETWEEN 1 AND 10)
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_reviews_user_tmdb ON reviews (user_id, tmdb_id);
CREATE INDEX IF NOT EXISTS idx_reviews_user ON reviews (user_id);
CREATE INDEX IF NOT EXISTS idx_reviews_tmdb ON reviews (tmdb_id);

SELECT * FROM reviews;
 
-- Käyttäjien suosikkielokuvien taulu
CREATE TABLE user_favorites (
    user_id BIGINT NOT NULL, -- Viittaa käyttäjään (users-taulun id)
    tmdb_id INT NOT NULL, -- Elokuvan TMDB-tietokannan id
    position INT, -- Suosikin järjestys (valinnainen)
    added_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), -- Aikaleima
    PRIMARY KEY (user_id, tmdb_id), -- Yhdistelmäavain: yksi elokuva voi olla vain kerran
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE-- Jos käyttäjä poistetaan, suosikkilista poistuu
);
